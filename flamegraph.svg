<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="11436"><g><title>libsystem_m.dylib`atan (73 samples, 0.64%)</title><rect x="0.2886%" y="325" width="0.6383%" height="15" fill="rgb(227,0,7)" fg:x="33" fg:w="73"/><text x="0.5386%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (97 samples, 0.85%)</title><rect x="0.9269%" y="325" width="0.8482%" height="15" fill="rgb(217,0,24)" fg:x="106" fg:w="97"/><text x="1.1769%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (70 samples, 0.61%)</title><rect x="1.7751%" y="325" width="0.6121%" height="15" fill="rgb(221,193,54)" fg:x="203" fg:w="70"/><text x="2.0251%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (66 samples, 0.58%)</title><rect x="2.3872%" y="325" width="0.5771%" height="15" fill="rgb(248,212,6)" fg:x="273" fg:w="66"/><text x="2.6372%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (63 samples, 0.55%)</title><rect x="2.9643%" y="325" width="0.5509%" height="15" fill="rgb(208,68,35)" fg:x="339" fg:w="63"/><text x="3.2143%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.28%)</title><rect x="3.5152%" y="325" width="0.2798%" height="15" fill="rgb(232,128,0)" fg:x="402" fg:w="32"/><text x="3.7652%" y="335.50"></text></g><g><title>sars`DYLD-STUB$$atan (73 samples, 0.64%)</title><rect x="3.8038%" y="325" width="0.6383%" height="15" fill="rgb(207,160,47)" fg:x="435" fg:w="73"/><text x="4.0538%" y="335.50"></text></g><g><title>sars`DYLD-STUB$$free (42 samples, 0.37%)</title><rect x="4.4421%" y="325" width="0.3673%" height="15" fill="rgb(228,23,34)" fg:x="508" fg:w="42"/><text x="4.6921%" y="335.50"></text></g><g><title>sars`DYLD-STUB$$malloc (100 samples, 0.87%)</title><rect x="4.8094%" y="325" width="0.8744%" height="15" fill="rgb(218,30,26)" fg:x="550" fg:w="100"/><text x="5.0594%" y="335.50"></text></g><g><title>sars`__rdl_alloc (105 samples, 0.92%)</title><rect x="5.6838%" y="325" width="0.9182%" height="15" fill="rgb(220,122,19)" fg:x="650" fg:w="105"/><text x="5.9338%" y="335.50"></text></g><g><title>sars`__rust_dealloc (33 samples, 0.29%)</title><rect x="6.6020%" y="325" width="0.2886%" height="15" fill="rgb(250,228,42)" fg:x="755" fg:w="33"/><text x="6.8520%" y="335.50"></text></g><g><title>sars`alloc::fmt::format (5 samples, 0.04%)</title><rect x="6.8905%" y="325" width="0.0437%" height="15" fill="rgb(240,193,28)" fg:x="788" fg:w="5"/><text x="7.1405%" y="335.50"></text></g><g><title>sars`core::fmt::write (5 samples, 0.04%)</title><rect x="6.8905%" y="309" width="0.0437%" height="15" fill="rgb(216,20,37)" fg:x="788" fg:w="5"/><text x="7.1405%" y="319.50"></text></g><g><title>sars`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (5 samples, 0.04%)</title><rect x="6.8905%" y="293" width="0.0437%" height="15" fill="rgb(206,188,39)" fg:x="788" fg:w="5"/><text x="7.1405%" y="303.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.03%)</title><rect x="6.9080%" y="277" width="0.0262%" height="15" fill="rgb(217,207,13)" fg:x="790" fg:w="3"/><text x="7.1580%" y="287.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="6.9168%" y="261" width="0.0175%" height="15" fill="rgb(231,73,38)" fg:x="791" fg:w="2"/><text x="7.1668%" y="271.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="6.9168%" y="245" width="0.0175%" height="15" fill="rgb(225,20,46)" fg:x="791" fg:w="2"/><text x="7.1668%" y="255.50"></text></g><g><title>sars`console::utils::measure_text_width (2 samples, 0.02%)</title><rect x="6.9517%" y="277" width="0.0175%" height="15" fill="rgb(210,31,41)" fg:x="795" fg:w="2"/><text x="7.2017%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.03%)</title><rect x="6.9780%" y="261" width="0.0350%" height="15" fill="rgb(221,200,47)" fg:x="798" fg:w="4"/><text x="7.2280%" y="271.50"></text></g><g><title>sars`indicatif::state::ProgressDrawTarget::apply_draw_state (9 samples, 0.08%)</title><rect x="6.9692%" y="277" width="0.0787%" height="15" fill="rgb(226,26,5)" fg:x="797" fg:w="9"/><text x="7.2192%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.03%)</title><rect x="7.0217%" y="261" width="0.0262%" height="15" fill="rgb(249,33,26)" fg:x="803" fg:w="3"/><text x="7.2717%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="7.0654%" y="261" width="0.0262%" height="15" fill="rgb(235,183,28)" fg:x="808" fg:w="3"/><text x="7.3154%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="7.0916%" y="261" width="0.0437%" height="15" fill="rgb(221,5,38)" fg:x="811" fg:w="5"/><text x="7.3416%" y="271.50"></text></g><g><title>sars`DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="7.1529%" y="261" width="0.0262%" height="15" fill="rgb(247,18,42)" fg:x="818" fg:w="3"/><text x="7.4029%" y="271.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.06%)</title><rect x="7.2315%" y="245" width="0.0612%" height="15" fill="rgb(241,131,45)" fg:x="827" fg:w="7"/><text x="7.4815%" y="255.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (6 samples, 0.05%)</title><rect x="7.2403%" y="229" width="0.0525%" height="15" fill="rgb(249,31,29)" fg:x="828" fg:w="6"/><text x="7.4903%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.03%)</title><rect x="7.2578%" y="213" width="0.0350%" height="15" fill="rgb(225,111,53)" fg:x="830" fg:w="4"/><text x="7.5078%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.03%)</title><rect x="7.2578%" y="197" width="0.0350%" height="15" fill="rgb(238,160,17)" fg:x="830" fg:w="4"/><text x="7.5078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.03%)</title><rect x="7.2665%" y="181" width="0.0262%" height="15" fill="rgb(214,148,48)" fg:x="831" fg:w="3"/><text x="7.5165%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="7.2753%" y="165" width="0.0175%" height="15" fill="rgb(232,36,49)" fg:x="832" fg:w="2"/><text x="7.5253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="7.2753%" y="149" width="0.0175%" height="15" fill="rgb(209,103,24)" fg:x="832" fg:w="2"/><text x="7.5253%" y="159.50"></text></g><g><title>sars`alloc::str::_&lt;impl str&gt;::replace (13 samples, 0.11%)</title><rect x="7.1878%" y="261" width="0.1137%" height="15" fill="rgb(229,88,8)" fg:x="822" fg:w="13"/><text x="7.4378%" y="271.50"></text></g><g><title>libsystem_c.dylib`isatty (27 samples, 0.24%)</title><rect x="7.3190%" y="229" width="0.2361%" height="15" fill="rgb(213,181,19)" fg:x="837" fg:w="27"/><text x="7.5690%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (27 samples, 0.24%)</title><rect x="7.3190%" y="213" width="0.2361%" height="15" fill="rgb(254,191,54)" fg:x="837" fg:w="27"/><text x="7.5690%" y="223.50"></text></g><g><title>sars`indicatif::state::ProgressDrawTarget::width (57 samples, 0.50%)</title><rect x="7.3015%" y="261" width="0.4984%" height="15" fill="rgb(241,83,37)" fg:x="835" fg:w="57"/><text x="7.5515%" y="271.50"></text></g><g><title>sars`terminal_size::unix::terminal_size_using_fd (56 samples, 0.49%)</title><rect x="7.3102%" y="245" width="0.4897%" height="15" fill="rgb(233,36,39)" fg:x="836" fg:w="56"/><text x="7.5602%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (28 samples, 0.24%)</title><rect x="7.5551%" y="229" width="0.2448%" height="15" fill="rgb(226,3,54)" fg:x="864" fg:w="28"/><text x="7.8051%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="7.8262%" y="245" width="0.0437%" height="15" fill="rgb(245,192,40)" fg:x="895" fg:w="5"/><text x="8.0762%" y="255.50"></text></g><g><title>sars`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="7.8786%" y="245" width="0.0175%" height="15" fill="rgb(238,167,29)" fg:x="901" fg:w="2"/><text x="8.1286%" y="255.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="7.8786%" y="229" width="0.0175%" height="15" fill="rgb(232,182,51)" fg:x="901" fg:w="2"/><text x="8.1286%" y="239.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="7.8786%" y="213" width="0.0175%" height="15" fill="rgb(231,60,39)" fg:x="901" fg:w="2"/><text x="8.1286%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="7.8786%" y="197" width="0.0175%" height="15" fill="rgb(208,69,12)" fg:x="901" fg:w="2"/><text x="8.1286%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="7.8786%" y="181" width="0.0175%" height="15" fill="rgb(235,93,37)" fg:x="901" fg:w="2"/><text x="8.1286%" y="191.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="7.9049%" y="213" width="0.0350%" height="15" fill="rgb(213,116,39)" fg:x="904" fg:w="4"/><text x="8.1549%" y="223.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="7.9136%" y="197" width="0.0262%" height="15" fill="rgb(222,207,29)" fg:x="905" fg:w="3"/><text x="8.1636%" y="207.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="7.9136%" y="181" width="0.0262%" height="15" fill="rgb(206,96,30)" fg:x="905" fg:w="3"/><text x="8.1636%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="7.9224%" y="165" width="0.0175%" height="15" fill="rgb(218,138,4)" fg:x="906" fg:w="2"/><text x="8.1724%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="7.9224%" y="149" width="0.0175%" height="15" fill="rgb(250,191,14)" fg:x="906" fg:w="2"/><text x="8.1724%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="7.9224%" y="133" width="0.0175%" height="15" fill="rgb(239,60,40)" fg:x="906" fg:w="2"/><text x="8.1724%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="7.9836%" y="85" width="0.0175%" height="15" fill="rgb(206,27,48)" fg:x="913" fg:w="2"/><text x="8.2336%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="7.9836%" y="69" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="913" fg:w="2"/><text x="8.2336%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="7.9836%" y="53" width="0.0175%" height="15" fill="rgb(250,213,24)" fg:x="913" fg:w="2"/><text x="8.2336%" y="63.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="7.9748%" y="165" width="0.0350%" height="15" fill="rgb(247,123,22)" fg:x="912" fg:w="4"/><text x="8.2248%" y="175.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="7.9748%" y="149" width="0.0350%" height="15" fill="rgb(231,138,38)" fg:x="912" fg:w="4"/><text x="8.2248%" y="159.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="7.9836%" y="133" width="0.0262%" height="15" fill="rgb(231,145,46)" fg:x="913" fg:w="3"/><text x="8.2336%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="7.9836%" y="117" width="0.0262%" height="15" fill="rgb(251,118,11)" fg:x="913" fg:w="3"/><text x="8.2336%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.03%)</title><rect x="7.9836%" y="101" width="0.0262%" height="15" fill="rgb(217,147,25)" fg:x="913" fg:w="3"/><text x="8.2336%" y="111.50"></text></g><g><title>sars`alloc::fmt::format (15 samples, 0.13%)</title><rect x="7.8961%" y="245" width="0.1312%" height="15" fill="rgb(247,81,37)" fg:x="903" fg:w="15"/><text x="8.1461%" y="255.50"></text></g><g><title>sars`core::fmt::write (14 samples, 0.12%)</title><rect x="7.9049%" y="229" width="0.1224%" height="15" fill="rgb(209,12,38)" fg:x="904" fg:w="14"/><text x="8.1549%" y="239.50"></text></g><g><title>sars`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (10 samples, 0.09%)</title><rect x="7.9398%" y="213" width="0.0874%" height="15" fill="rgb(227,1,9)" fg:x="908" fg:w="10"/><text x="8.1898%" y="223.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (8 samples, 0.07%)</title><rect x="7.9573%" y="197" width="0.0700%" height="15" fill="rgb(248,47,43)" fg:x="910" fg:w="8"/><text x="8.2073%" y="207.50"></text></g><g><title>sars`core::fmt::write (7 samples, 0.06%)</title><rect x="7.9661%" y="181" width="0.0612%" height="15" fill="rgb(221,10,30)" fg:x="911" fg:w="7"/><text x="8.2161%" y="191.50"></text></g><g><title>sars`indicatif::style::ProgressStyle::format_bar (27 samples, 0.24%)</title><rect x="7.7999%" y="261" width="0.2361%" height="15" fill="rgb(210,229,1)" fg:x="892" fg:w="27"/><text x="8.0499%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="8.0972%" y="245" width="0.0175%" height="15" fill="rgb(222,148,37)" fg:x="926" fg:w="2"/><text x="8.3472%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="8.1147%" y="245" width="0.0262%" height="15" fill="rgb(234,67,33)" fg:x="928" fg:w="3"/><text x="8.3647%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.03%)</title><rect x="8.1410%" y="245" width="0.0262%" height="15" fill="rgb(247,98,35)" fg:x="931" fg:w="3"/><text x="8.3910%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.03%)</title><rect x="8.2896%" y="229" width="0.0262%" height="15" fill="rgb(247,138,52)" fg:x="948" fg:w="3"/><text x="8.5396%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="8.3158%" y="229" width="0.0175%" height="15" fill="rgb(213,79,30)" fg:x="951" fg:w="2"/><text x="8.5658%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="8.3158%" y="213" width="0.0175%" height="15" fill="rgb(246,177,23)" fg:x="951" fg:w="2"/><text x="8.5658%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="8.3158%" y="197" width="0.0175%" height="15" fill="rgb(230,62,27)" fg:x="951" fg:w="2"/><text x="8.5658%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.09%)</title><rect x="8.3333%" y="229" width="0.0874%" height="15" fill="rgb(216,154,8)" fg:x="953" fg:w="10"/><text x="8.5833%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="8.3945%" y="213" width="0.0262%" height="15" fill="rgb(244,35,45)" fg:x="960" fg:w="3"/><text x="8.6445%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="8.4208%" y="229" width="0.0175%" height="15" fill="rgb(251,115,12)" fg:x="963" fg:w="2"/><text x="8.6708%" y="239.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.04%)</title><rect x="8.4820%" y="165" width="0.0437%" height="15" fill="rgb(240,54,50)" fg:x="970" fg:w="5"/><text x="8.7320%" y="175.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="8.4907%" y="149" width="0.0350%" height="15" fill="rgb(233,84,52)" fg:x="971" fg:w="4"/><text x="8.7407%" y="159.50"></text></g><g><title>sars`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (10 samples, 0.09%)</title><rect x="8.4470%" y="229" width="0.0874%" height="15" fill="rgb(207,117,47)" fg:x="966" fg:w="10"/><text x="8.6970%" y="239.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (7 samples, 0.06%)</title><rect x="8.4732%" y="213" width="0.0612%" height="15" fill="rgb(249,43,39)" fg:x="969" fg:w="7"/><text x="8.7232%" y="223.50"></text></g><g><title>sars`core::fmt::write (7 samples, 0.06%)</title><rect x="8.4732%" y="197" width="0.0612%" height="15" fill="rgb(209,38,44)" fg:x="969" fg:w="7"/><text x="8.7232%" y="207.50"></text></g><g><title>sars`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.05%)</title><rect x="8.4820%" y="181" width="0.0525%" height="15" fill="rgb(236,212,23)" fg:x="970" fg:w="6"/><text x="8.7320%" y="191.50"></text></g><g><title>sars`&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.03%)</title><rect x="8.5432%" y="229" width="0.0262%" height="15" fill="rgb(242,79,21)" fg:x="977" fg:w="3"/><text x="8.7932%" y="239.50"></text></g><g><title>sars`core::fmt::Formatter::pad_integral (2 samples, 0.02%)</title><rect x="8.6044%" y="149" width="0.0175%" height="15" fill="rgb(211,96,35)" fg:x="984" fg:w="2"/><text x="8.8544%" y="159.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (5 samples, 0.04%)</title><rect x="8.6306%" y="117" width="0.0437%" height="15" fill="rgb(253,215,40)" fg:x="987" fg:w="5"/><text x="8.8806%" y="127.50"></text></g><g><title>sars`alloc::string::String::push (4 samples, 0.03%)</title><rect x="8.6394%" y="101" width="0.0350%" height="15" fill="rgb(211,81,21)" fg:x="988" fg:w="4"/><text x="8.8894%" y="111.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="8.6394%" y="85" width="0.0350%" height="15" fill="rgb(208,190,38)" fg:x="988" fg:w="4"/><text x="8.8894%" y="95.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="8.6481%" y="69" width="0.0262%" height="15" fill="rgb(235,213,38)" fg:x="989" fg:w="3"/><text x="8.8981%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="8.6569%" y="53" width="0.0175%" height="15" fill="rgb(237,122,38)" fg:x="990" fg:w="2"/><text x="8.9069%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="8.6569%" y="37" width="0.0175%" height="15" fill="rgb(244,218,35)" fg:x="990" fg:w="2"/><text x="8.9069%" y="47.50"></text></g><g><title>sars`&lt;indicatif::format::FormattedDuration as core::fmt::Display&gt;::fmt (11 samples, 0.10%)</title><rect x="8.5869%" y="197" width="0.0962%" height="15" fill="rgb(240,68,47)" fg:x="982" fg:w="11"/><text x="8.8369%" y="207.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (11 samples, 0.10%)</title><rect x="8.5869%" y="181" width="0.0962%" height="15" fill="rgb(210,16,53)" fg:x="982" fg:w="11"/><text x="8.8369%" y="191.50"></text></g><g><title>sars`core::fmt::write (11 samples, 0.10%)</title><rect x="8.5869%" y="165" width="0.0962%" height="15" fill="rgb(235,124,12)" fg:x="982" fg:w="11"/><text x="8.8369%" y="175.50"></text></g><g><title>sars`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (7 samples, 0.06%)</title><rect x="8.6219%" y="149" width="0.0612%" height="15" fill="rgb(224,169,11)" fg:x="986" fg:w="7"/><text x="8.8719%" y="159.50"></text></g><g><title>sars`core::fmt::Formatter::pad_integral (6 samples, 0.05%)</title><rect x="8.6306%" y="133" width="0.0525%" height="15" fill="rgb(250,166,2)" fg:x="987" fg:w="6"/><text x="8.8806%" y="143.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.05%)</title><rect x="8.7181%" y="133" width="0.0525%" height="15" fill="rgb(242,216,29)" fg:x="997" fg:w="6"/><text x="8.9681%" y="143.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.05%)</title><rect x="8.7181%" y="117" width="0.0525%" height="15" fill="rgb(230,116,27)" fg:x="997" fg:w="6"/><text x="8.9681%" y="127.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (6 samples, 0.05%)</title><rect x="8.7181%" y="101" width="0.0525%" height="15" fill="rgb(228,99,48)" fg:x="997" fg:w="6"/><text x="8.9681%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="8.7531%" y="85" width="0.0175%" height="15" fill="rgb(253,11,6)" fg:x="1001" fg:w="2"/><text x="9.0031%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="8.7531%" y="69" width="0.0175%" height="15" fill="rgb(247,143,39)" fg:x="1001" fg:w="2"/><text x="9.0031%" y="79.50"></text></g><g><title>sars`alloc::fmt::format (23 samples, 0.20%)</title><rect x="8.5782%" y="229" width="0.2011%" height="15" fill="rgb(236,97,10)" fg:x="981" fg:w="23"/><text x="8.8282%" y="239.50"></text></g><g><title>sars`core::fmt::write (22 samples, 0.19%)</title><rect x="8.5869%" y="213" width="0.1924%" height="15" fill="rgb(233,208,19)" fg:x="982" fg:w="22"/><text x="8.8369%" y="223.50"></text></g><g><title>sars`&lt;indicatif::format::HumanDuration as core::fmt::Display&gt;::fmt (11 samples, 0.10%)</title><rect x="8.6831%" y="197" width="0.0962%" height="15" fill="rgb(216,164,2)" fg:x="993" fg:w="11"/><text x="8.9331%" y="207.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (10 samples, 0.09%)</title><rect x="8.6919%" y="181" width="0.0874%" height="15" fill="rgb(220,129,5)" fg:x="994" fg:w="10"/><text x="8.9419%" y="191.50"></text></g><g><title>sars`core::fmt::write (10 samples, 0.09%)</title><rect x="8.6919%" y="165" width="0.0874%" height="15" fill="rgb(242,17,10)" fg:x="994" fg:w="10"/><text x="8.9419%" y="175.50"></text></g><g><title>sars`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (9 samples, 0.08%)</title><rect x="8.7006%" y="149" width="0.0787%" height="15" fill="rgb(242,107,0)" fg:x="995" fg:w="9"/><text x="8.9506%" y="159.50"></text></g><g><title>sars`alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="8.7793%" y="229" width="0.0175%" height="15" fill="rgb(251,28,31)" fg:x="1004" fg:w="2"/><text x="9.0293%" y="239.50"></text></g><g><title>sars`core::fmt::write (2 samples, 0.02%)</title><rect x="8.8055%" y="229" width="0.0175%" height="15" fill="rgb(233,223,10)" fg:x="1007" fg:w="2"/><text x="9.0555%" y="239.50"></text></g><g><title>sars`indicatif::state::ProgressState::eta (2 samples, 0.02%)</title><rect x="8.8230%" y="229" width="0.0175%" height="15" fill="rgb(215,21,27)" fg:x="1009" fg:w="2"/><text x="9.0730%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.02%)</title><rect x="8.8580%" y="213" width="0.0175%" height="15" fill="rgb(232,23,21)" fg:x="1013" fg:w="2"/><text x="9.1080%" y="223.50"></text></g><g><title>sars`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (58 samples, 0.51%)</title><rect x="8.8755%" y="213" width="0.5072%" height="15" fill="rgb(244,5,23)" fg:x="1015" fg:w="58"/><text x="9.1255%" y="223.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::exec (55 samples, 0.48%)</title><rect x="8.9017%" y="197" width="0.4809%" height="15" fill="rgb(226,81,46)" fg:x="1018" fg:w="55"/><text x="9.1517%" y="207.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::backtrack (46 samples, 0.40%)</title><rect x="8.9804%" y="181" width="0.4022%" height="15" fill="rgb(247,70,30)" fg:x="1027" fg:w="46"/><text x="9.2304%" y="191.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="9.3914%" y="213" width="0.0262%" height="15" fill="rgb(212,68,19)" fg:x="1074" fg:w="3"/><text x="9.6414%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="9.3914%" y="197" width="0.0262%" height="15" fill="rgb(240,187,13)" fg:x="1074" fg:w="3"/><text x="9.6414%" y="207.50"></text></g><g><title>sars`alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="9.4176%" y="213" width="0.0175%" height="15" fill="rgb(223,113,26)" fg:x="1077" fg:w="2"/><text x="9.6676%" y="223.50"></text></g><g><title>sars`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (144 samples, 1.26%)</title><rect x="8.1847%" y="245" width="1.2592%" height="15" fill="rgb(206,192,2)" fg:x="936" fg:w="144"/><text x="8.4347%" y="255.50"></text></g><g><title>sars`regex::re_unicode::Regex::captures (69 samples, 0.60%)</title><rect x="8.8405%" y="229" width="0.6034%" height="15" fill="rgb(241,108,4)" fg:x="1011" fg:w="69"/><text x="9.0905%" y="239.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::backtrack (82 samples, 0.72%)</title><rect x="9.5925%" y="181" width="0.7170%" height="15" fill="rgb(247,173,49)" fg:x="1097" fg:w="82"/><text x="9.8425%" y="191.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::exec (91 samples, 0.80%)</title><rect x="9.5400%" y="197" width="0.7957%" height="15" fill="rgb(224,114,35)" fg:x="1091" fg:w="91"/><text x="9.7900%" y="207.50"></text></g><g><title>sars`regex::utf8::decode_utf8 (3 samples, 0.03%)</title><rect x="10.3095%" y="181" width="0.0262%" height="15" fill="rgb(245,159,27)" fg:x="1179" fg:w="3"/><text x="10.5595%" y="191.50"></text></g><g><title>sars`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (98 samples, 0.86%)</title><rect x="9.5051%" y="213" width="0.8569%" height="15" fill="rgb(245,172,44)" fg:x="1087" fg:w="98"/><text x="9.7551%" y="223.50"></text></g><g><title>sars`regex::exec::ExecNoSync::exec_nfa (3 samples, 0.03%)</title><rect x="10.3358%" y="197" width="0.0262%" height="15" fill="rgb(236,23,11)" fg:x="1182" fg:w="3"/><text x="10.5858%" y="207.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.03%)</title><rect x="10.3620%" y="213" width="0.0350%" height="15" fill="rgb(205,117,38)" fg:x="1185" fg:w="4"/><text x="10.6120%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="10.3620%" y="197" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="1185" fg:w="4"/><text x="10.6120%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="10.3708%" y="181" width="0.0262%" height="15" fill="rgb(244,70,9)" fg:x="1186" fg:w="3"/><text x="10.6208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="10.3708%" y="165" width="0.0262%" height="15" fill="rgb(217,125,39)" fg:x="1186" fg:w="3"/><text x="10.6208%" y="175.50"></text></g><g><title>sars`&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.93%)</title><rect x="9.4876%" y="229" width="0.9269%" height="15" fill="rgb(235,36,10)" fg:x="1085" fg:w="106"/><text x="9.7376%" y="239.50"></text></g><g><title>sars`&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.96%)</title><rect x="9.4614%" y="245" width="0.9619%" height="15" fill="rgb(251,123,47)" fg:x="1082" fg:w="110"/><text x="9.7114%" y="255.50"></text></g><g><title>sars`indicatif::progress_bar::ProgressBar::set_message (404 samples, 3.53%)</title><rect x="6.9342%" y="325" width="3.5327%" height="15" fill="rgb(221,13,13)" fg:x="793" fg:w="404"/><text x="7.1842%" y="335.50">sar..</text></g><g><title>sars`indicatif::state::ProgressState::update_and_draw (403 samples, 3.52%)</title><rect x="6.9430%" y="309" width="3.5240%" height="15" fill="rgb(238,131,9)" fg:x="794" fg:w="403"/><text x="7.1930%" y="319.50">sar..</text></g><g><title>sars`indicatif::state::ProgressState::draw (402 samples, 3.52%)</title><rect x="6.9517%" y="293" width="3.5152%" height="15" fill="rgb(211,50,8)" fg:x="795" fg:w="402"/><text x="7.2017%" y="303.50">sar..</text></g><g><title>sars`indicatif::style::ProgressStyle::format_state (390 samples, 3.41%)</title><rect x="7.0567%" y="277" width="3.4103%" height="15" fill="rgb(245,182,24)" fg:x="807" fg:w="390"/><text x="7.3067%" y="287.50">sar..</text></g><g><title>sars`regex::re_unicode::Regex::replace_all (277 samples, 2.42%)</title><rect x="8.0448%" y="261" width="2.4222%" height="15" fill="rgb(242,14,37)" fg:x="920" fg:w="277"/><text x="8.2948%" y="271.50">sa..</text></g><g><title>sars`regex::re_unicode::Captures::get (5 samples, 0.04%)</title><rect x="10.4232%" y="245" width="0.0437%" height="15" fill="rgb(246,228,12)" fg:x="1192" fg:w="5"/><text x="10.6732%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.09%)</title><rect x="10.4757%" y="293" width="0.0874%" height="15" fill="rgb(213,55,15)" fg:x="1198" fg:w="10"/><text x="10.7257%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.02%)</title><rect x="10.5806%" y="277" width="0.0175%" height="15" fill="rgb(209,9,3)" fg:x="1210" fg:w="2"/><text x="10.8306%" y="287.50"></text></g><g><title>sars`indicatif::state::ProgressDrawTarget::apply_draw_state (5 samples, 0.04%)</title><rect x="10.5806%" y="293" width="0.0437%" height="15" fill="rgb(230,59,30)" fg:x="1210" fg:w="5"/><text x="10.8306%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.05%)</title><rect x="10.6331%" y="277" width="0.0525%" height="15" fill="rgb(209,121,21)" fg:x="1216" fg:w="6"/><text x="10.8831%" y="287.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="10.6856%" y="277" width="0.0262%" height="15" fill="rgb(220,109,13)" fg:x="1222" fg:w="3"/><text x="10.9356%" y="287.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.04%)</title><rect x="10.7555%" y="261" width="0.0437%" height="15" fill="rgb(232,18,1)" fg:x="1230" fg:w="5"/><text x="11.0055%" y="271.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="10.7730%" y="245" width="0.0262%" height="15" fill="rgb(215,41,42)" fg:x="1232" fg:w="3"/><text x="11.0230%" y="255.50"></text></g><g><title>sars`alloc::str::_&lt;impl str&gt;::replace (11 samples, 0.10%)</title><rect x="10.7118%" y="277" width="0.0962%" height="15" fill="rgb(224,123,36)" fg:x="1225" fg:w="11"/><text x="10.9618%" y="287.50"></text></g><g><title>libsystem_c.dylib`isatty (27 samples, 0.24%)</title><rect x="10.8080%" y="245" width="0.2361%" height="15" fill="rgb(240,125,3)" fg:x="1236" fg:w="27"/><text x="11.0580%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (27 samples, 0.24%)</title><rect x="10.8080%" y="229" width="0.2361%" height="15" fill="rgb(205,98,50)" fg:x="1236" fg:w="27"/><text x="11.0580%" y="239.50"></text></g><g><title>sars`indicatif::state::ProgressDrawTarget::width (59 samples, 0.52%)</title><rect x="10.8080%" y="277" width="0.5159%" height="15" fill="rgb(205,185,37)" fg:x="1236" fg:w="59"/><text x="11.0580%" y="287.50"></text></g><g><title>sars`terminal_size::unix::terminal_size_using_fd (59 samples, 0.52%)</title><rect x="10.8080%" y="261" width="0.5159%" height="15" fill="rgb(238,207,15)" fg:x="1236" fg:w="59"/><text x="11.0580%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (32 samples, 0.28%)</title><rect x="11.0441%" y="245" width="0.2798%" height="15" fill="rgb(213,199,42)" fg:x="1263" fg:w="32"/><text x="11.2941%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="11.3589%" y="261" width="0.0437%" height="15" fill="rgb(235,201,11)" fg:x="1299" fg:w="5"/><text x="11.6089%" y="271.50"></text></g><g><title>sars`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="11.4026%" y="261" width="0.0350%" height="15" fill="rgb(207,46,11)" fg:x="1304" fg:w="4"/><text x="11.6526%" y="271.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="11.4113%" y="245" width="0.0262%" height="15" fill="rgb(241,35,35)" fg:x="1305" fg:w="3"/><text x="11.6613%" y="255.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="11.4201%" y="229" width="0.0175%" height="15" fill="rgb(243,32,47)" fg:x="1306" fg:w="2"/><text x="11.6701%" y="239.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.03%)</title><rect x="11.4551%" y="229" width="0.0262%" height="15" fill="rgb(247,202,23)" fg:x="1310" fg:w="3"/><text x="11.7051%" y="239.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="11.4551%" y="213" width="0.0262%" height="15" fill="rgb(219,102,11)" fg:x="1310" fg:w="3"/><text x="11.7051%" y="223.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="11.4638%" y="197" width="0.0175%" height="15" fill="rgb(243,110,44)" fg:x="1311" fg:w="2"/><text x="11.7138%" y="207.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.04%)</title><rect x="11.4988%" y="213" width="0.0437%" height="15" fill="rgb(222,74,54)" fg:x="1315" fg:w="5"/><text x="11.7488%" y="223.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="11.5075%" y="197" width="0.0350%" height="15" fill="rgb(216,99,12)" fg:x="1316" fg:w="4"/><text x="11.7575%" y="207.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="11.5163%" y="181" width="0.0262%" height="15" fill="rgb(226,22,26)" fg:x="1317" fg:w="3"/><text x="11.7663%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="11.5163%" y="165" width="0.0262%" height="15" fill="rgb(217,163,10)" fg:x="1317" fg:w="3"/><text x="11.7663%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="11.5250%" y="149" width="0.0175%" height="15" fill="rgb(213,25,53)" fg:x="1318" fg:w="2"/><text x="11.7750%" y="159.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="11.5425%" y="181" width="0.0350%" height="15" fill="rgb(252,105,26)" fg:x="1320" fg:w="4"/><text x="11.7925%" y="191.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="11.5512%" y="165" width="0.0262%" height="15" fill="rgb(220,39,43)" fg:x="1321" fg:w="3"/><text x="11.8012%" y="175.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="11.5512%" y="149" width="0.0262%" height="15" fill="rgb(229,68,48)" fg:x="1321" fg:w="3"/><text x="11.8012%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="11.5512%" y="133" width="0.0262%" height="15" fill="rgb(252,8,32)" fg:x="1321" fg:w="3"/><text x="11.8012%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.03%)</title><rect x="11.5512%" y="117" width="0.0262%" height="15" fill="rgb(223,20,43)" fg:x="1321" fg:w="3"/><text x="11.8012%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="11.5600%" y="101" width="0.0175%" height="15" fill="rgb(229,81,49)" fg:x="1322" fg:w="2"/><text x="11.8100%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="11.5600%" y="85" width="0.0175%" height="15" fill="rgb(236,28,36)" fg:x="1322" fg:w="2"/><text x="11.8100%" y="95.50"></text></g><g><title>sars`alloc::fmt::format (16 samples, 0.14%)</title><rect x="11.4463%" y="261" width="0.1399%" height="15" fill="rgb(249,185,26)" fg:x="1309" fg:w="16"/><text x="11.6963%" y="271.50"></text></g><g><title>sars`core::fmt::write (16 samples, 0.14%)</title><rect x="11.4463%" y="245" width="0.1399%" height="15" fill="rgb(249,174,33)" fg:x="1309" fg:w="16"/><text x="11.6963%" y="255.50"></text></g><g><title>sars`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (12 samples, 0.10%)</title><rect x="11.4813%" y="229" width="0.1049%" height="15" fill="rgb(233,201,37)" fg:x="1313" fg:w="12"/><text x="11.7313%" y="239.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (5 samples, 0.04%)</title><rect x="11.5425%" y="213" width="0.0437%" height="15" fill="rgb(221,78,26)" fg:x="1320" fg:w="5"/><text x="11.7925%" y="223.50"></text></g><g><title>sars`core::fmt::write (5 samples, 0.04%)</title><rect x="11.5425%" y="197" width="0.0437%" height="15" fill="rgb(250,127,30)" fg:x="1320" fg:w="5"/><text x="11.7925%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="11.6037%" y="213" width="0.0175%" height="15" fill="rgb(230,49,44)" fg:x="1327" fg:w="2"/><text x="11.8537%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="11.6037%" y="197" width="0.0175%" height="15" fill="rgb(229,67,23)" fg:x="1327" fg:w="2"/><text x="11.8537%" y="207.50"></text></g><g><title>sars`indicatif::style::ProgressStyle::format_bar (35 samples, 0.31%)</title><rect x="11.3239%" y="277" width="0.3061%" height="15" fill="rgb(249,83,47)" fg:x="1295" fg:w="35"/><text x="11.5739%" y="287.50"></text></g><g><title>sars`alloc::str::_&lt;impl str&gt;::repeat (5 samples, 0.04%)</title><rect x="11.5862%" y="261" width="0.0437%" height="15" fill="rgb(215,43,3)" fg:x="1325" fg:w="5"/><text x="11.8362%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="11.5950%" y="245" width="0.0350%" height="15" fill="rgb(238,154,13)" fg:x="1326" fg:w="4"/><text x="11.8450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="11.5950%" y="229" width="0.0350%" height="15" fill="rgb(219,56,2)" fg:x="1326" fg:w="4"/><text x="11.8450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="11.6649%" y="261" width="0.0437%" height="15" fill="rgb(233,0,4)" fg:x="1334" fg:w="5"/><text x="11.9149%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="11.7174%" y="261" width="0.0175%" height="15" fill="rgb(235,30,7)" fg:x="1340" fg:w="2"/><text x="11.9674%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.10%)</title><rect x="11.8660%" y="245" width="0.0962%" height="15" fill="rgb(250,79,13)" fg:x="1357" fg:w="11"/><text x="12.1160%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="11.9272%" y="229" width="0.0350%" height="15" fill="rgb(211,146,34)" fg:x="1364" fg:w="4"/><text x="12.1772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="11.9710%" y="245" width="0.0175%" height="15" fill="rgb(228,22,38)" fg:x="1369" fg:w="2"/><text x="12.2210%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="12.0147%" y="229" width="0.0175%" height="15" fill="rgb(235,168,5)" fg:x="1374" fg:w="2"/><text x="12.2647%" y="239.50"></text></g><g><title>sars`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.09%)</title><rect x="12.0497%" y="197" width="0.0874%" height="15" fill="rgb(221,155,16)" fg:x="1378" fg:w="10"/><text x="12.2997%" y="207.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.09%)</title><rect x="12.0497%" y="181" width="0.0874%" height="15" fill="rgb(215,215,53)" fg:x="1378" fg:w="10"/><text x="12.2997%" y="191.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (9 samples, 0.08%)</title><rect x="12.0584%" y="165" width="0.0787%" height="15" fill="rgb(223,4,10)" fg:x="1379" fg:w="9"/><text x="12.3084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.03%)</title><rect x="12.1021%" y="149" width="0.0350%" height="15" fill="rgb(234,103,6)" fg:x="1384" fg:w="4"/><text x="12.3521%" y="159.50"></text></g><g><title>sars`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (18 samples, 0.16%)</title><rect x="11.9972%" y="245" width="0.1574%" height="15" fill="rgb(227,97,0)" fg:x="1372" fg:w="18"/><text x="12.2472%" y="255.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (14 samples, 0.12%)</title><rect x="12.0322%" y="229" width="0.1224%" height="15" fill="rgb(234,150,53)" fg:x="1376" fg:w="14"/><text x="12.2822%" y="239.50"></text></g><g><title>sars`core::fmt::write (13 samples, 0.11%)</title><rect x="12.0409%" y="213" width="0.1137%" height="15" fill="rgb(228,201,54)" fg:x="1377" fg:w="13"/><text x="12.2909%" y="223.50"></text></g><g><title>sars`&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;usize&gt;&gt;::index (4 samples, 0.03%)</title><rect x="12.1546%" y="245" width="0.0350%" height="15" fill="rgb(222,22,37)" fg:x="1390" fg:w="4"/><text x="12.4046%" y="255.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="12.2158%" y="101" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="1397" fg:w="3"/><text x="12.4658%" y="111.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="12.2158%" y="85" width="0.0262%" height="15" fill="rgb(233,25,53)" fg:x="1397" fg:w="3"/><text x="12.4658%" y="95.50"></text></g><g><title>sars`&lt;indicatif::format::FormattedDuration as core::fmt::Display&gt;::fmt (5 samples, 0.04%)</title><rect x="12.2071%" y="213" width="0.0437%" height="15" fill="rgb(210,40,34)" fg:x="1396" fg:w="5"/><text x="12.4571%" y="223.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (5 samples, 0.04%)</title><rect x="12.2071%" y="197" width="0.0437%" height="15" fill="rgb(241,220,44)" fg:x="1396" fg:w="5"/><text x="12.4571%" y="207.50"></text></g><g><title>sars`core::fmt::write (5 samples, 0.04%)</title><rect x="12.2071%" y="181" width="0.0437%" height="15" fill="rgb(235,28,35)" fg:x="1396" fg:w="5"/><text x="12.4571%" y="191.50"></text></g><g><title>sars`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (5 samples, 0.04%)</title><rect x="12.2071%" y="165" width="0.0437%" height="15" fill="rgb(210,56,17)" fg:x="1396" fg:w="5"/><text x="12.4571%" y="175.50"></text></g><g><title>sars`core::fmt::Formatter::pad_integral (5 samples, 0.04%)</title><rect x="12.2071%" y="149" width="0.0437%" height="15" fill="rgb(224,130,29)" fg:x="1396" fg:w="5"/><text x="12.4571%" y="159.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (4 samples, 0.03%)</title><rect x="12.2158%" y="133" width="0.0350%" height="15" fill="rgb(235,212,8)" fg:x="1397" fg:w="4"/><text x="12.4658%" y="143.50"></text></g><g><title>sars`alloc::string::String::push (4 samples, 0.03%)</title><rect x="12.2158%" y="117" width="0.0350%" height="15" fill="rgb(223,33,50)" fg:x="1397" fg:w="4"/><text x="12.4658%" y="127.50"></text></g><g><title>sars`alloc::fmt::format (25 samples, 0.22%)</title><rect x="12.1896%" y="245" width="0.2186%" height="15" fill="rgb(219,149,13)" fg:x="1394" fg:w="25"/><text x="12.4396%" y="255.50"></text></g><g><title>sars`core::fmt::write (24 samples, 0.21%)</title><rect x="12.1983%" y="229" width="0.2099%" height="15" fill="rgb(250,156,29)" fg:x="1395" fg:w="24"/><text x="12.4483%" y="239.50"></text></g><g><title>sars`&lt;indicatif::format::HumanDuration as core::fmt::Display&gt;::fmt (18 samples, 0.16%)</title><rect x="12.2508%" y="213" width="0.1574%" height="15" fill="rgb(216,193,19)" fg:x="1401" fg:w="18"/><text x="12.5008%" y="223.50"></text></g><g><title>sars`core::fmt::Formatter::write_fmt (15 samples, 0.13%)</title><rect x="12.2770%" y="197" width="0.1312%" height="15" fill="rgb(216,135,14)" fg:x="1404" fg:w="15"/><text x="12.5270%" y="207.50"></text></g><g><title>sars`core::fmt::write (14 samples, 0.12%)</title><rect x="12.2858%" y="181" width="0.1224%" height="15" fill="rgb(241,47,5)" fg:x="1405" fg:w="14"/><text x="12.5358%" y="191.50"></text></g><g><title>sars`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (13 samples, 0.11%)</title><rect x="12.2945%" y="165" width="0.1137%" height="15" fill="rgb(233,42,35)" fg:x="1406" fg:w="13"/><text x="12.5445%" y="175.50"></text></g><g><title>sars`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.10%)</title><rect x="12.3033%" y="149" width="0.1049%" height="15" fill="rgb(231,13,6)" fg:x="1407" fg:w="12"/><text x="12.5533%" y="159.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.10%)</title><rect x="12.3120%" y="133" width="0.0962%" height="15" fill="rgb(207,181,40)" fg:x="1408" fg:w="11"/><text x="12.5620%" y="143.50"></text></g><g><title>sars`alloc::raw_vec::finish_grow (10 samples, 0.09%)</title><rect x="12.3207%" y="117" width="0.0874%" height="15" fill="rgb(254,173,49)" fg:x="1409" fg:w="10"/><text x="12.5707%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="12.3557%" y="101" width="0.0525%" height="15" fill="rgb(221,1,38)" fg:x="1413" fg:w="6"/><text x="12.6057%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="12.3645%" y="85" width="0.0437%" height="15" fill="rgb(206,124,46)" fg:x="1414" fg:w="5"/><text x="12.6145%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="12.3645%" y="69" width="0.0437%" height="15" fill="rgb(249,21,11)" fg:x="1414" fg:w="5"/><text x="12.6145%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="12.3907%" y="53" width="0.0175%" height="15" fill="rgb(222,201,40)" fg:x="1417" fg:w="2"/><text x="12.6407%" y="63.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.06%)</title><rect x="12.4344%" y="229" width="0.0612%" height="15" fill="rgb(235,61,29)" fg:x="1422" fg:w="7"/><text x="12.6844%" y="239.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::backtrack (59 samples, 0.52%)</title><rect x="12.6443%" y="197" width="0.5159%" height="15" fill="rgb(219,207,3)" fg:x="1446" fg:w="59"/><text x="12.8943%" y="207.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::exec (71 samples, 0.62%)</title><rect x="12.5481%" y="213" width="0.6208%" height="15" fill="rgb(222,56,46)" fg:x="1435" fg:w="71"/><text x="12.7981%" y="223.50"></text></g><g><title>sars`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (78 samples, 0.68%)</title><rect x="12.4956%" y="229" width="0.6821%" height="15" fill="rgb(239,76,54)" fg:x="1429" fg:w="78"/><text x="12.7456%" y="239.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="13.1864%" y="229" width="0.0175%" height="15" fill="rgb(231,124,27)" fg:x="1508" fg:w="2"/><text x="13.4364%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="13.1864%" y="213" width="0.0175%" height="15" fill="rgb(249,195,6)" fg:x="1508" fg:w="2"/><text x="13.4364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="13.1864%" y="197" width="0.0175%" height="15" fill="rgb(237,174,47)" fg:x="1508" fg:w="2"/><text x="13.4364%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="13.1864%" y="181" width="0.0175%" height="15" fill="rgb(206,201,31)" fg:x="1508" fg:w="2"/><text x="13.4364%" y="191.50"></text></g><g><title>sars`alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 0.03%)</title><rect x="13.2039%" y="229" width="0.0262%" height="15" fill="rgb(231,57,52)" fg:x="1510" fg:w="3"/><text x="13.4539%" y="239.50"></text></g><g><title>sars`regex::re_unicode::Regex::captures (94 samples, 0.82%)</title><rect x="12.4169%" y="245" width="0.8220%" height="15" fill="rgb(248,177,22)" fg:x="1420" fg:w="94"/><text x="12.6669%" y="255.50"></text></g><g><title>sars`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (173 samples, 1.51%)</title><rect x="11.7349%" y="261" width="1.5128%" height="15" fill="rgb(215,211,37)" fg:x="1342" fg:w="173"/><text x="11.9849%" y="271.50"></text></g><g><title>sars`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (3 samples, 0.03%)</title><rect x="13.2651%" y="245" width="0.0262%" height="15" fill="rgb(241,128,51)" fg:x="1517" fg:w="3"/><text x="13.5151%" y="255.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::backtrack (93 samples, 0.81%)</title><rect x="13.3351%" y="197" width="0.8132%" height="15" fill="rgb(227,165,31)" fg:x="1525" fg:w="93"/><text x="13.5851%" y="207.50"></text></g><g><title>sars`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (98 samples, 0.86%)</title><rect x="13.3088%" y="229" width="0.8569%" height="15" fill="rgb(228,167,24)" fg:x="1522" fg:w="98"/><text x="13.5588%" y="239.50"></text></g><g><title>sars`regex::backtrack::Bounded&lt;I&gt;::exec (96 samples, 0.84%)</title><rect x="13.3263%" y="213" width="0.8395%" height="15" fill="rgb(228,143,12)" fg:x="1524" fg:w="96"/><text x="13.5763%" y="223.50"></text></g><g><title>sars`regex::utf8::decode_utf8 (2 samples, 0.02%)</title><rect x="14.1483%" y="197" width="0.0175%" height="15" fill="rgb(249,149,8)" fg:x="1618" fg:w="2"/><text x="14.3983%" y="207.50"></text></g><g><title>sars`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="14.1658%" y="229" width="0.0262%" height="15" fill="rgb(243,35,44)" fg:x="1620" fg:w="3"/><text x="14.4158%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="14.1745%" y="213" width="0.0175%" height="15" fill="rgb(246,89,9)" fg:x="1621" fg:w="2"/><text x="14.4245%" y="223.50"></text></g><g><title>sars`&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 1.01%)</title><rect x="13.2476%" y="261" width="1.0143%" height="15" fill="rgb(233,213,13)" fg:x="1515" fg:w="116"/><text x="13.4976%" y="271.50"></text></g><g><title>sars`&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.97%)</title><rect x="13.2914%" y="245" width="0.9706%" height="15" fill="rgb(233,141,41)" fg:x="1520" fg:w="111"/><text x="13.5414%" y="255.50"></text></g><g><title>sars`alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.07%)</title><rect x="14.1920%" y="229" width="0.0700%" height="15" fill="rgb(239,167,4)" fg:x="1623" fg:w="8"/><text x="14.4420%" y="239.50"></text></g><g><title>sars`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="14.2620%" y="261" width="0.0262%" height="15" fill="rgb(209,217,16)" fg:x="1631" fg:w="3"/><text x="14.5120%" y="271.50"></text></g><g><title>sars`indicatif::progress_bar::ProgressBar::set_position (442 samples, 3.86%)</title><rect x="10.4669%" y="325" width="3.8650%" height="15" fill="rgb(219,88,35)" fg:x="1197" fg:w="442"/><text x="10.7169%" y="335.50">sars..</text></g><g><title>sars`indicatif::state::ProgressState::update_and_draw (441 samples, 3.86%)</title><rect x="10.4757%" y="309" width="3.8562%" height="15" fill="rgb(220,193,23)" fg:x="1198" fg:w="441"/><text x="10.7257%" y="319.50">sars..</text></g><g><title>sars`indicatif::style::ProgressStyle::format_state (424 samples, 3.71%)</title><rect x="10.6243%" y="293" width="3.7076%" height="15" fill="rgb(230,90,52)" fg:x="1215" fg:w="424"/><text x="10.8743%" y="303.50">sars..</text></g><g><title>sars`regex::re_unicode::Regex::replace_all (309 samples, 2.70%)</title><rect x="11.6299%" y="277" width="2.7020%" height="15" fill="rgb(252,106,19)" fg:x="1330" fg:w="309"/><text x="11.8799%" y="287.50">sa..</text></g><g><title>sars`regex::re_unicode::Captures::get (4 samples, 0.03%)</title><rect x="14.2970%" y="261" width="0.0350%" height="15" fill="rgb(206,74,20)" fg:x="1635" fg:w="4"/><text x="14.5470%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (71 samples, 0.62%)</title><rect x="21.5023%" y="293" width="0.6208%" height="15" fill="rgb(230,138,44)" fg:x="2459" fg:w="71"/><text x="21.7523%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,348 samples, 11.79%)</title><rect x="25.5072%" y="277" width="11.7873%" height="15" fill="rgb(235,182,43)" fg:x="2917" fg:w="1348"/><text x="25.7572%" y="287.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (352 samples, 3.08%)</title><rect x="34.2165%" y="261" width="3.0780%" height="15" fill="rgb(242,16,51)" fg:x="3913" fg:w="352"/><text x="34.4665%" y="271.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,666 samples, 23.31%)</title><rect x="15.4862%" y="309" width="23.3123%" height="15" fill="rgb(248,9,4)" fg:x="1771" fg:w="2666"/><text x="15.7362%" y="319.50">libsystem_malloc.dylib`_malloc_zone_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,907 samples, 16.68%)</title><rect x="22.1231%" y="293" width="16.6754%" height="15" fill="rgb(210,31,22)" fg:x="2530" fg:w="1907"/><text x="22.3731%" y="303.50">libsystem_malloc.dylib`nan..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (172 samples, 1.50%)</title><rect x="37.2945%" y="277" width="1.5040%" height="15" fill="rgb(239,54,39)" fg:x="4265" fg:w="172"/><text x="37.5445%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (124 samples, 1.08%)</title><rect x="38.7985%" y="309" width="1.0843%" height="15" fill="rgb(230,99,41)" fg:x="4437" fg:w="124"/><text x="39.0485%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (211 samples, 1.85%)</title><rect x="39.8828%" y="309" width="1.8451%" height="15" fill="rgb(253,106,12)" fg:x="4561" fg:w="211"/><text x="40.1328%" y="319.50">l..</text></g><g><title>libsystem_malloc.dylib`free (886 samples, 7.75%)</title><rect x="41.7279%" y="309" width="7.7475%" height="15" fill="rgb(213,46,41)" fg:x="4772" fg:w="886"/><text x="41.9779%" y="319.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (248 samples, 2.17%)</title><rect x="47.3068%" y="293" width="2.1686%" height="15" fill="rgb(215,133,35)" fg:x="5410" fg:w="248"/><text x="47.5568%" y="303.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (157 samples, 1.37%)</title><rect x="49.4753%" y="309" width="1.3729%" height="15" fill="rgb(213,28,5)" fg:x="5658" fg:w="157"/><text x="49.7253%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (358 samples, 3.13%)</title><rect x="50.8482%" y="309" width="3.1305%" height="15" fill="rgb(215,77,49)" fg:x="5815" fg:w="358"/><text x="51.0982%" y="319.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.14%)</title><rect x="53.9787%" y="309" width="0.1399%" height="15" fill="rgb(248,100,22)" fg:x="6173" fg:w="16"/><text x="54.2287%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (64 samples, 0.56%)</title><rect x="54.1186%" y="309" width="0.5596%" height="15" fill="rgb(208,67,9)" fg:x="6189" fg:w="64"/><text x="54.3686%" y="319.50"></text></g><g><title>sars`DYLD-STUB$$free (174 samples, 1.52%)</title><rect x="54.6782%" y="309" width="1.5215%" height="15" fill="rgb(219,133,21)" fg:x="6253" fg:w="174"/><text x="54.9282%" y="319.50"></text></g><g><title>sars`hashbrown::raw::RawTable&lt;T,A&gt;::find (118 samples, 1.03%)</title><rect x="56.2085%" y="309" width="1.0318%" height="15" fill="rgb(246,46,29)" fg:x="6428" fg:w="118"/><text x="56.4585%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (544 samples, 4.76%)</title><rect x="71.0825%" y="277" width="4.7569%" height="15" fill="rgb(246,185,52)" fg:x="8129" fg:w="544"/><text x="71.3325%" y="287.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free (1,331 samples, 11.64%)</title><rect x="64.2183%" y="293" width="11.6387%" height="15" fill="rgb(252,136,11)" fg:x="7344" fg:w="1331"/><text x="64.4683%" y="303.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="75.8395%" y="277" width="0.0175%" height="15" fill="rgb(219,138,53)" fg:x="8673" fg:w="2"/><text x="76.0895%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (62 samples, 0.54%)</title><rect x="75.8569%" y="293" width="0.5421%" height="15" fill="rgb(211,51,23)" fg:x="8675" fg:w="62"/><text x="76.1069%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (397 samples, 3.47%)</title><rect x="76.3991%" y="293" width="3.4715%" height="15" fill="rgb(247,221,28)" fg:x="8737" fg:w="397"/><text x="76.6491%" y="303.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (115 samples, 1.01%)</title><rect x="79.8706%" y="293" width="1.0056%" height="15" fill="rgb(251,222,45)" fg:x="9134" fg:w="115"/><text x="80.1206%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (375 samples, 3.28%)</title><rect x="80.8762%" y="293" width="3.2791%" height="15" fill="rgb(217,162,53)" fg:x="9249" fg:w="375"/><text x="81.1262%" y="303.50">lib..</text></g><g><title>sars`DYLD-STUB$$memcmp (167 samples, 1.46%)</title><rect x="84.1553%" y="293" width="1.4603%" height="15" fill="rgb(229,93,14)" fg:x="9624" fg:w="167"/><text x="84.4053%" y="303.50"></text></g><g><title>sars`sars::microbe::Microbe::tick (8,920 samples, 78.00%)</title><rect x="14.3582%" y="325" width="77.9993%" height="15" fill="rgb(209,67,49)" fg:x="1642" fg:w="8920"/><text x="14.6082%" y="335.50">sars`sars::microbe::Microbe::tick</text></g><g><title>sars`sars::neural::NeuralNetwork::set_inputs (4,016 samples, 35.12%)</title><rect x="57.2403%" y="309" width="35.1172%" height="15" fill="rgb(213,87,29)" fg:x="6546" fg:w="4016"/><text x="57.4903%" y="319.50">sars`sars::neural::NeuralNetwork::set_inputs</text></g><g><title>sars`hashbrown::raw::RawTable&lt;T,A&gt;::find (771 samples, 6.74%)</title><rect x="85.6156%" y="293" width="6.7419%" height="15" fill="rgb(205,151,52)" fg:x="9791" fg:w="771"/><text x="85.8656%" y="303.50">sars`hash..</text></g><g><title>sars`sars::neural::NeuralNetwork::process (690 samples, 6.03%)</title><rect x="92.3575%" y="325" width="6.0336%" height="15" fill="rgb(253,215,39)" fg:x="10562" fg:w="690"/><text x="92.6075%" y="335.50">sars`sar..</text></g><g><title>libsystem_m.dylib`atan (301 samples, 2.63%)</title><rect x="95.7590%" y="309" width="2.6320%" height="15" fill="rgb(221,220,41)" fg:x="10951" fg:w="301"/><text x="96.0090%" y="319.50">li..</text></g><g><title>sars`sars::main (11,279 samples, 98.63%)</title><rect x="0.0000%" y="341" width="98.6271%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="11279"/><text x="0.2500%" y="351.50">sars`sars::main</text></g><g><title>sars`sars::neural::NeuralNetwork::set_inputs (27 samples, 0.24%)</title><rect x="98.3910%" y="325" width="0.2361%" height="15" fill="rgb(221,193,43)" fg:x="11252" fg:w="27"/><text x="98.6410%" y="335.50"></text></g><g><title>sars`sars::microbe::Microbe::tick (57 samples, 0.50%)</title><rect x="98.6271%" y="341" width="0.4984%" height="15" fill="rgb(240,128,52)" fg:x="11279" fg:w="57"/><text x="98.8771%" y="351.50"></text></g><g><title>all (11,436 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="447.50"></text></g><g><title>dyld`start (11,436 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>sars`main (11,436 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="415.50">sars`main</text></g><g><title>sars`std::rt::lang_start_internal (11,436 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="399.50">sars`std::rt::lang_start_internal</text></g><g><title>sars`std::rt::lang_start::_{{closure}} (11,436 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="383.50">sars`std::rt::lang_start::_{{closure}}</text></g><g><title>sars`std::sys_common::backtrace::__rust_begin_short_backtrace (11,436 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="11436"/><text x="0.2500%" y="367.50">sars`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sars`sars::neural::NeuralNetwork::process (100 samples, 0.87%)</title><rect x="99.1256%" y="341" width="0.8744%" height="15" fill="rgb(207,125,25)" fg:x="11336" fg:w="100"/><text x="99.3756%" y="351.50"></text></g></svg></svg>